using Toybox.WatchUi as Ui;
using Toybox.Graphics as Gfx;
using Toybox.Application as App;
using Toybox.Application.Properties as Props;
using Toybox.Application.Storage as Storage;
using Toybox.Time as Time;
using Toybox.Position as Position;
using Toybox.Time.Gregorian;
using Toybox.Math;
using Toybox.System as Sys;
using Toybox.Lang;

using Astro as astro;

(:glance)
module TRUE {
//    Synodic month (new Moon to new Moon), in days
//var lunardays = 29.53058770576d;
    const SYNODIC_MONTH = 29.53058868d;


	function myMod(a, b) {
		var d = (b < 0) ? -b : b;
		var m = (a - ((a / d).toLong() * d));
		var r = ((m < 0) ? (d + m) : m);
		return ((b < 0) ? (r + b) : r);
	}

	function jdn(year, month, day, hour, min, sec) {
		var options = {
			:year   => year,
			:month  => month,
			:day    => day,
			:hour   => hour,
			:minute => min,
			:second => sec
		};
		return Gregorian.moment(options).value() / 86400.0d + 2440587.5d;     // (seconds /(seconds per day)) + julian date of epoch       2440587.5 / 86400 = 28,24753472222 Days
	}

/*  JYEAR  --  Convert  Julian  date  to  year,  month, day, which are
               returned as an Array.  */

function jyear(td) {
    var z, f, a, alpha, b, c, d, e, mm;

    td += 0.5;
    z = Math.floor(td);
    f = td - z;

    if (z < 2299161.0) {
        a = z;
    } else {
        alpha = Math.floor((z - 1867216.25) / 36524.25);
        a = z + 1 + alpha - Math.floor(alpha / 4);
    }

    b = a + 1524;
    c = Math.floor((b - 122.1) / 365.25);
    d = Math.floor(365.25 * c);
    e = Math.floor((b - d) / 30.6001);
    mm = Math.floor((e < 14) ? (e - 1) : (e - 13));

    return [
            (Math.floor((mm > 2) ? (c - 4716) : (c - 4715))).toNumber(),
            mm.toNumber(),
            (Math.floor(b - d - Math.floor(30.6001 * e) + f)).toNumber()
            ];
}

/*  JHMS  --  Convert Julian time to hour, minutes, and seconds,
              returned as a three-element array.  */

function jhms(j) {
    var ij;

    j += 0.5;                 /* Astronomical to civil */
    ij = (j - Math.floor(j)) * 86400.0;

	var hr = (Math.floor(ij / 3600)).toNumber();
	var mn = (Math.floor(myMod((ij / 60), 60))).toNumber();
	var sc = (Math.floor(myMod(ij, 60))).toNumber();

    return [hr, mn, sc];
}

/*  PAD  --  Pad a string to a given length with a given fill character.  */

function pad(str, howlong, padwith) {
    var s = str.toString();

    while (s.length() < howlong) {
        s = padwith + s;
    }
    return s;
}

/*  EDATE  --  Edit date and time to application specific format.  */

var Months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
             ];

function edate(j) {
    var date, time;

    j += (30.0 / (24 * 60 * 60));     // Round to nearest minute
    date = jyear(j);
    time = jhms(j);

    return Months[date[1] - 1] + " " + pad(date[2], 2, " ") + " " +
           pad(time[0], 2, " ") + ":" + pad(time[1], 2, "0");

//    return [ date[0], date[1], date[2], time[0], time[1] ];
}

/*  TRUEPHASE  --  Given a K value used to determine the mean phase of
                   the new moon, and a phase selector (0.0, 0.25, 0.5,
                   0.75), obtain the true, corrected phase time.  */

function truephase(k) {
//    k += phase;                     /* Add phase to new moon time */

    var t = k / 1236.85d;             /* Time in Julian centuries from
                                       1900 January 0.5 */
    var t2 = t * t;                     /* Square for frequent use */
    var t3 = t2 * t;                    /* Cube for frequent use */
    var pt = 2415020.75933d              /* Mean time of phase */
         + SYNODIC_MONTH * k
         + 0.0001178d * t2
         - 0.000000155d * t3
         + 0.00033d * Math.sin(Math.toRadians(166.56d + 132.87d * t - 0.009173d * t2));

    var m = 359.2242d                    /* Sun's mean anomaly */
        + 29.10535608d * k
        - 0.0000333d * t2
        - 0.00000347d * t3;
    var mprime = 306.0253d               /* Moon's mean anomaly */
        + 385.81691806d * k
        + 0.0107306d * t2
        + 0.00001236d * t3;
    var f = 21.2964d                     /* Moon's argument of latitude */
        + 390.67050646d * k
        - 0.0016528d * t2
        - 0.00000239d * t3;

       /* Corrections for New and Full Moon */

       pt +=     (0.1734d - 0.000393d * t) * Math.sin(Math.toRadians(m))
                + 0.0021d * Math.sin(Math.toRadians(2 * m))
                - 0.4068d * Math.sin(Math.toRadians(mprime))
                + 0.0161d * Math.sin(Math.toRadians(2 * mprime))
                - 0.0004d * Math.sin(Math.toRadians(3 * mprime))
                + 0.0104d * Math.sin(Math.toRadians(2 * f))
                - 0.0051d * Math.sin(Math.toRadians(m + mprime))
                - 0.0074d * Math.sin(Math.toRadians(m - mprime))
                + 0.0004d * Math.sin(Math.toRadians(2 * f + m))
                - 0.0004d * Math.sin(Math.toRadians(2 * f - m))
                - 0.0006d * Math.sin(Math.toRadians(2 * f + mprime))
                + 0.0010d * Math.sin(Math.toRadians(2 * f - mprime))
                + 0.0005d * Math.sin(Math.toRadians(m + 2 * mprime));
    return pt;
}

//  GEN  --  Update the tables when an action button is pressed

function getPhase(year, month, day, hour, min, sec) {
    var mtime;
    var phaset = new [3];
    
	var now = jdn(year, month, day, hour, min, sec);
    var k1 = Math.floor((year - 1900) * 12.3685).toNumber();// - 4;
    var minx = 0;
    for (var l = 0; true; l++) {
        mtime = truephase(k1);
        if (mtime >= now) {
            minx++;
        }
        phaset[minx] = mtime;
        if (mtime > now) {
            minx++;
            break;
        }
        k1 += 1;
    }
    
    var moon_age = now - phaset[0]; // age in days
    var syn_month = phaset[1] - phaset[0];
    var moon_phase = moon_age / syn_month; // as a fraction

Sys.println("now: " + edate(now) + ", last: " + edate(phaset[0]) + ", next: " + edate(phaset[1]));
 //    Age of the Moon, in degrees
    var moon_degrees = moon_phase * 360.0d;
    
//    Phase of the Moon
	    var moon_illum = (1 - Math.cos(Math.toRadians(moon_degrees))) / 2.0;
	    var res = {
    	    "phase" =>  moon_phase,
        	"illuminated" => moon_illum,
        	"age"=> moon_age,
        	"month"=> syn_month
		};
    
    return res;
}

}

